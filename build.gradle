buildscript {
    repositories {
        mavenCentral()
        maven { url "https://maven.minecraftforge.net" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://repo.spongepowered.org/maven" }
    }
    dependencies {
        classpath ('com.anatawa12.forge:ForgeGradle:1.2-1.1.+') {
            changing = true
        }
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
    }
}

plugins{
    id 'java-library'
    id 'maven-publish'
}

apply plugin: "forge"

// These settings allow you to choose what version of Java you want to be compatible with. Forge 1.7.10 runs on Java 6 to 8.
sourceCompatibility = 1.8
targetCompatibility = 1.8

version = project.mod_version
group = project.baseGroup // http://maven.apache.org/guides/mini/guide-naming-conventions.html

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "run"
    mappings = "stable_12"
    runClient{
        args("-Dfml.coreMods.load=com.yukkuritaku.unicodefix.tweaker.UnicodeFixLoadingPlugin", "-Dmixin.debug=true")
    }
}

sourceSets.main {
    output.setResourcesDir(file("$buildDir/classes/java/main"))
}

repositories {
    maven { url = 'https://repo.spongepowered.org/maven' }
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"

    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

processResources {
    // This will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // Replace values in only mcmod.info.
    filesMatching('mcmod.info') {
        // Replace version and mcversion.
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
}

jar {
    manifest.attributes([
            "Specification-Title"        : "unicodefix",
            "Specification-Vendor"       : "Yukkuritaku",
            "Specification-Version"      : "1", // We are version 1 of ourselves
            "Implementation-Title"       : project.name,
            "Implementation-Version"     : "${version}",
            "Implementation-Vendor"      : "Yukkuritaku",
            "Implementation-Timestamp"   : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),

            "FMLCorePlugin"              : "com.yukkuritaku.unicodefix.tweaker.UnicodeFixLoadingPlugin",
            'ForceLoadAsMod'             : true,
            'FMLCorePluginContainsFMLMod': true,
            'ModSide'                    : 'CLIENT'
    ])
}

// Ensures that the encoding of source files is set to UTF-8, see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

// This task creates a .jar file containing the source code of this mod.
tasks.register('sourcesJar', Jar) {
    archiveClassifier = "sources"
    dependsOn classes
    from sourceSets.main.allSource
}

// This task creates a .jar file containing a deobfuscated version of this mod, for other developers to use in a development environment.
tasks.register('devJar', Jar) {
    archiveClassifier = "devJar"
    from sourceSets.main.output
}

// Creates the listed artifacts on building the mod.
artifacts {
    archives sourcesJar
    archives devJar
}

// This block configures any maven publications you want to make.
publishing {
    publications {
        mavenJava(MavenPublication) {
            // Add any other artifacts here that you would like to publish!
            artifact(jar) {
                builtBy build
            }
            artifact(sourcesJar) {
                builtBy sourcesJar
            }
            artifact(devJar) {
                builtBy devJar
            }
        }
    }

    // This block selects the repositories you want to publish to.
    repositories {
        // Add the repositories you want to publish to here.
    }
}
